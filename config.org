#+title: Literate Emacs Configuration
#+author: Ducky

* Custom Variables
  #+begin_src emacs-lisp
    (setq user-backup-directory '(("." . "~/.emacs.d/backups/")))
    (setq user-default-directory "~/")


    (setq user-tasks-file "~/Documents/Personal/tasks.org")
    (setq user-journals-file "~/Documents/Personal/journal.org")
    (setq user-prompts-file "~/Documents/Personal/prompt.org")

    (setq dashboard-banner-logo-title "...")
    (setq dashboard-banner-logo-png "~/.emacs.d/images/dark_emacs.png")
    (setq dashboard-startup-banner "~/.emacs.d/images/dark_emacs.png")
  #+end_src
* Functions
** Edit init.el
   #+begin_src emacs-lisp
     (defun edit-config ()
	  "Reload the configuration file"
	  (interactive)
	  (find-file "~/.emacs.d/init.el"))
   #+end_src

* Config
** Backup
   #+begin_src emacs-lisp
     (setq backup-directory-alist user-backup-directory)
     (setq default-directory user-default-directory)
   #+end_src

** Defaults
   #+begin_src emacs-lisp
     (setq-default ad-redefinition-action 'accept ; Silence warnings for redefinition
           cursor-in-non-selected-windows nil     ; Hide the cursor in inactive windows
           custom-unlispify-menu-entries nil      ; Prefer kebab-case for titles
           custom-unlispify-tag-names nil         ; Prefer kebab-case for symbols
           delete-by-moving-to-trash t            ; Delete files to trash
           fill-column 80                         ; Set width for automatic line breaks
           gc-cons-threshold (* 8 1024 1024)      ; We're not using Game Boys anymore
           help-window-select t                   ; Focus new help windows when opened
           indent-tabs-mode nil                   ; Stop using tabs to indent
           inhibit-startup-screen t               ; Disable start-up screen
           initial-scratch-message ""             ; Empty the initial *scratch* buffer
           mouse-yank-at-point t                  ; Yank at point rather than pointer
           recenter-positions '(5 top bottom)     ; Set re-centering positions
           scroll-conservatively 101              ; Avoid recentering when scrolling far
           scroll-margin 2                        ; Add a margin when scrolling vertically
           select-enable-clipboard t              ; Merge system's and Emacs' clipboard
           sentence-end-double-space nil          ; Use a single space after dots
           show-help-function nil                 ; Disable help text everywhere
           tab-width 4                            ; Set width for tabs
           uniquify-buffer-name-style 'forward    ; Uniquify buffer names
           warning-minimum-level :error           ; Skip warning buffers
           window-combination-resize t            ; Resize windows proportionally
           x-stretch-cursor t)                    ; Stretch cursor to the glyph width
     (blink-cursor-mode 0)                   ; Prefer a still cursor
     (delete-selection-mode 1)               ; Replace region when inserting text
     (fset 'yes-or-no-p 'y-or-n-p)           ; Replace yes/no prompts with y/n
     (global-subword-mode 1)                 ; Iterate through CamelCase words
     (mouse-avoidance-mode 'exile)           ; Avoid collision of mouse with point
     (put 'downcase-region 'disabled nil)    ; Enable downcase-region
     (put 'upcase-region 'disabled nil)      ; Enable upcase-region
     (set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
     (toggle-scroll-bar -1)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
   #+end_src

** Essentials
   #+begin_src emacs-lisp
     (global-auto-revert-mode 1)
     (electric-pair-mode 1)
     (display-time-mode 1)
   #+end_src

** Setup
*** Setting up MELPA package
   #+begin_src emacs-lisp
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (package-initialize)
   #+end_src

*** Use-package
    #+begin_src emacs-lisp
      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package t)
      (setq-default
	use-package-always-defer t
	use-package-always-ensure t))
    #+end_src

*** Moving customize out of init.el
    #+begin_src emacs-lisp
      (setq custom-file "~/.emacs.d/custom.el")
      (load custom-file)
    #+end_src

** Font
   #+begin_src emacs-lisp
     (set-frame-font "DejaVu Sans Mono 13" nil t)
   #+end_src

** Theme
    #+begin_src emacs-lisp
      (use-package doom-themes
        :ensure t
        :init (load-theme 'doom-plain-dark t))
    #+end_src   
   
** Org
*** General
    #+begin_src emacs-lisp
      (use-package org
        :config (setq org-hide-emphasis-markers t
              org-log-done 'time
              org-log-done 'note
              org-startup-indented t))
    #+end_src
*** Agenda
    #+begin_src emacs-lisp
      (use-package org-agenda
        :bind ("C-c a" . org-agenda)
        :config (setq org-agenda-files (list
                                        user-tasks-file)
                      org-agenda-span 7
                      org-agenda-todo-ignore-tempstamp t
                      org-agenda-skip-unavailable-files t
                      org-agenda-prefix-format
                      '((agenda . " %i  %-30:c%?-12t% s")
                        (todo . " %i %-12:c")
                        (tags . " %i %-12:c")
                        (search . " %i %-12:c"))))
    #+end_src
*** Capture
    #+begin_src emacs-lisp
        (use-package org-capture
      :bind ("C-c c" . org-capture)
      :config (setq org-capture-templates
                    '(("t" "Task Entry" entry (file+datetree user-tasks-file)
                       "* TODO %^{PROMPT}\n:properties:\n:category: %^{PROMPT}\n:created: %U\n:end:\n%?"
                       :prepend :jump-to-captured)

                      ("j" "Jouranl Entry" entry (file+datetree user-journals-file)
                       "* %^{PROMPT}\n:properties:\n:created: %U\n:end:\n\n%?"
                       :prepend :jump-to-captured)

                      ("p" "Prompt Entry" entry (file+datetree user-prompts-file)
                       "* Entered on %U%?"))))
    #+end_src
*** Cliplink
    #+begin_src emacs-lisp
      (use-package org-cliplink
	:ensure
	:bind (("C-x p i" . org-cliplink)))
    #+end_src
*** Download
    #+begin_src emacs-lisp
      (use-package org-download
	:ensure
	:hook (dired-mode . org-download-enable)
	:config (org-download-screenshot "flameshot gui --raw > %s"))
    #+end_src
*** Superstar
    #+begin_src emacs-lisp
      (use-package org-superstar
	:ensure t
	:hook (org-mode . (lambda () (org-superstar-mode 1))))
    #+end_src
** LSP
*** General
    #+begin_src emacs-lisp
      (use-package lsp-mode :ensure t)
      (use-package lsp-ui :ensure t :commands lsp-ui-mode)
      (use-package lsp-ivy :ensure t :commands lsp-ivy-workspace-symbol)
      (use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)
      (use-package dap-mode :ensure t :after lsp-mode :config (dap-auto-configure-mode))
      (use-package yasnippet :ensure t :config (yas-global-mode))
    #+end_src
*** Java
    #+begin_src emacs-lisp
      (use-package lsp-java :ensure t :hook (java-mode . lsp))
    #+end_src
*** Python
    #+begin_src emacs-lisp
      (use-package lsp-jedi
	:ensure t
	:config
	(with-eval-after-load "lsp-mode"
	  (add-to-list 'lsp-disabled-clients 'pyls)
	  (add-to-list 'lsp-enabled-clients 'jedi)))
    #+end_src
* Packages
** Company
     #+begin_src emacs-lisp
       (use-package company
	 :ensure t
	 :hook (after-init . global-company-mode)
	 :config (setq company-idle-delay 0.1))
     #+end_src
** Dashboard
     #+begin_src emacs-lisp
       (use-package dashboard
	 :ensure t
	 :init (dashboard-setup-startup-hook))
     #+end_src
** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :hook (text-mode . flyspell-mode)
       :init (global-flycheck-mode)) 
   #+end_src
** Ivy
   #+begin_src emacs-lisp
     (use-package ivy
       :ensure t
       :init (ivy-mode 1)
       :config (setq ivy-use-virtual-buffers t
		     enable-recursive-minibuffers t))
   #+end_src
** Ledger Mode
   #+begin_src emacs-lisp
     (use-package ledger-mode
       :ensure t
       :hook (ledger-mode . (lambda ()
			      (setq-local tab-always-indent 'complete)
			      (setq-local completion-cycle-threshold t)
			      (setq-local ledger-complete-in-steps t))))
   #+end_src
** Markdown Mode
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+end_src
** Visual Fill Column
   #+begin_src emacs-lisp
     (use-package visual-fill-column
       :ensure
       :hook (text-mode . turn-on-visual-line-mode) (visual-line-mode . visual-fill-column-mode)
       :config (setq visual-fill-column-width 120
		     visual-line-mode t))
   #+end_src
* Extra
** Credits

   I would like to thank these people for these configuration ideas. 

   + https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
